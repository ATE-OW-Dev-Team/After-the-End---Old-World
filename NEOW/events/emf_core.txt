# -*- ck2.events -*-


namespace = emf_core

# emf_core.65
# Recalculate capital-contiguous provinces for an independent realm
#
# Called on annual maintenance throughout the year as well as explicitly
# from all CBs' on_success_posttitle -> emf_cb_on_success_posttitle -> here
# specifically for the realms potentially affected by territory change due to the war.
# Also called on_startup.
character_event = {
	id = emf_core.65

	is_triggered_only = yes
	hide_window = yes

	only_independent = yes # Note that this filters-out revolt top realms too, which is intentional

	trigger = {
		capital_scope = { owner = { character = ROOT } }
	}

	immediate = {
		# log = "DEBUG: emf_core.65: calculating emf_capital_connected for [This.GetTitledFirstName] of [This.PrimaryTitle.GetBaseName] ([This.GetID]/[This.PrimaryTitle.GetID])"
		any_realm_province = { # Remove old state
			limit = { owner = { same_realm = ROOT } } # any_realm_province includes provinces in which we have a realm barony
			clr_flag = emf_capital_connected
			clr_flag = emf_capital_connected_by_seazone
		}
		capital_scope = { # Seed the capital
			set_flag = emf_capital_connected
			any_neighbor_province = { # Handle near-OPMs quickly (loop below makes it technically redundant)
				limit = { owner = { same_realm = ROOT } }
				set_flag = emf_capital_connected
			}
		}
		while = {
			limit = {
				any_realm_province = {
					owner = { same_realm = ROOT }
					NOT = { has_flag = emf_capital_connected }
					any_neighbor_province = {
						owner = { same_realm = ROOT }
						has_flag = emf_capital_connected
					}
				}
			}
			any_realm_province = {
				limit = {
					owner = { same_realm = ROOT }
					NOT = { has_flag = emf_capital_connected }
					any_neighbor_province = {
						owner = { same_realm = ROOT }
						has_flag = emf_capital_connected
					}
				}
				set_flag = emf_capital_connected
			}
		}
		# Now path through any independent revolt realms of ours
		any_war = {
			limit = {
				defender = { character = ROOT }
				attacker = {
					liege = { character = PREV } #independent = yes and any_independent_ruler exclude revolts
					OR = {
						in_revolt = yes
						liege_before_war = { character = ROOT }
					}
				}
			}
			attacker = {
				reverse_opinion = { who = ROOT modifier = opinion_my_rebel }
				any_realm_province = {
					limit = { owner_under_PREV = yes }
					clr_flag = emf_capital_connected
					clr_flag = emf_capital_connected_by_seazone
				}
			}
		}
		while = {
			limit = {
				any_opinion_modifier_target = {
					reverse_has_opinion_modifier = { who = PREV modifier = opinion_my_rebel }
					any_realm_province = {
						owner_under_PREV = yes
						NOT = { has_flag = emf_capital_connected }
						any_neighbor_province = {
							has_flag = emf_capital_connected
							owner = {
								top_liege = {
									OR = {
										character = ROOT
										ROOT = {
											any_opinion_modifier_target = {
												reverse_has_opinion_modifier = { who = PREV modifier = opinion_my_rebel }
												character = PREVPREV
											}
										}
									}
								}
							}
						}
					}
				}
			}
			any_opinion_modifier_target = {
				limit = {
					reverse_has_opinion_modifier = { who = PREV modifier = opinion_my_rebel }
					any_realm_province = {
						owner_under_PREV = yes
						NOT = { has_flag = emf_capital_connected }
						any_neighbor_province = {
							has_flag = emf_capital_connected
							owner = {
								top_liege = {
									OR = {
										character = ROOT
										ROOT = {
											any_opinion_modifier_target = {
												reverse_has_opinion_modifier = { who = PREV modifier = opinion_my_rebel }
												character = PREVPREV
											}
										}
									}
								}
							}
						}
					}
				}
				any_realm_province = {
					limit = {
						owner_under_PREV = yes
						NOT = { has_flag = emf_capital_connected }
						any_neighbor_province = {
							has_flag = emf_capital_connected
							owner = {
								top_liege = {
									OR = {
										character = ROOT
										ROOT = {
											any_opinion_modifier_target = {
												reverse_has_opinion_modifier = { who = PREV modifier = opinion_my_rebel }
												character = PREVPREV
											}
										}
									}
								}
							}
						}
					}
					set_flag = emf_capital_connected
				}
			}
		}
		# Now, mark the provinces which are capital-connected only via a seazone adjacency
		any_realm_province = {
			limit = {
				port = yes
				owner = { same_realm = ROOT }
				NOT = { has_flag = emf_capital_connected }
				any_neighbor_province = {
					is_land = no
					any_neighbor_province = {
						NOT = { province = PREVPREV } # Not the original port from which we started
						owner = { same_realm = ROOT }
						has_flag = emf_capital_connected
					}
				}
			}
			set_flag = emf_capital_connected_by_seazone # might want to make this into a modifier w/ slight malus
		}
		# Now, do the same through any of our revolt realms
		any_opinion_modifier_target = {
			limit = { reverse_has_opinion_modifier = { who = PREV modifier = opinion_my_rebel } }
			any_realm_province = {
				limit = {
					port = yes
					owner_under_PREV = yes
					NOT = { has_flag = emf_capital_connected }
					any_neighbor_province = {
						is_land = no
						any_neighbor_province = {
							has_flag = emf_capital_connected
							owner = {
								top_liege = {
									OR = {
										character = ROOT
										ROOT = {
											any_opinion_modifier_target = {
												reverse_has_opinion_modifier = { who = PREV modifier = opinion_my_rebel }
												character = PREVPREV
											}
										}
									}
								}
							}
						}
					}
				}
				set_flag = emf_capital_connected_by_seazone
			}
		}
		# Now, mark those provinces connected to provinces which are capital-connected only via a seazone adjacency
		while = {
			limit = {
				any_realm_province = {
					owner = { same_realm = ROOT }
					NOT = { has_flag = emf_capital_connected_by_seazone }
					any_neighbor_province = {
						owner = { same_realm = ROOT }
						has_flag = emf_capital_connected_by_seazone
					}
				}
			}
			any_realm_province = {
				limit = {
					owner = { same_realm = ROOT }
					NOT = { has_flag = emf_capital_connected_by_seazone }
					any_neighbor_province = {
						owner = { same_realm = ROOT }
						has_flag = emf_capital_connected_by_seazone
					}
				}
				set_flag = emf_capital_connected_by_seazone
			}
		}
		# Finally, propogate the capital-connected-via-seazone adjacencies through our rebel realms
		while = {
			limit = {
				any_opinion_modifier_target = {
					reverse_has_opinion_modifier = { who = PREV modifier = opinion_my_rebel }
					any_realm_province = {
						owner_under_PREV = yes
						NOT = { has_flag = emf_capital_connected_by_seazone }
						any_neighbor_province = {
							has_flag = emf_capital_connected_by_seazone
							owner = {
								top_liege = {
									OR = {
										character = ROOT
										ROOT = {
											any_opinion_modifier_target = {
												reverse_has_opinion_modifier = { who = PREV modifier = opinion_my_rebel }
												character = PREVPREV
											}
										}
									}
								}
							}
						}
					}
				}
			}
			any_opinion_modifier_target = {
				limit = {
					reverse_has_opinion_modifier = { who = PREV modifier = opinion_my_rebel }
					any_realm_province = {
						owner_under_PREV = yes
						NOT = { has_flag = emf_capital_connected_by_seazone }
						any_neighbor_province = {
							has_flag = emf_capital_connected_by_seazone
							owner = {
								top_liege = {
									OR = {
										character = ROOT
										ROOT = {
											any_opinion_modifier_target = {
												reverse_has_opinion_modifier = { who = PREV modifier = opinion_my_rebel }
												character = PREVPREV
											}
										}
									}
								}
							}
						}
					}
				}
				any_realm_province = {
					limit = {
						owner_under_PREV = yes
						NOT = { has_flag = emf_capital_connected_by_seazone }
						any_neighbor_province = {
							has_flag = emf_capital_connected_by_seazone
							owner = {
								top_liege = {
									OR = {
										character = ROOT
										ROOT = {
											any_opinion_modifier_target = {
												reverse_has_opinion_modifier = { who = PREV modifier = opinion_my_rebel }
												character = PREVPREV
											}
										}
									}
								}
							}
						}
					}
					set_flag = emf_capital_connected_by_seazone
				}
			}
		}
		# Cleanup rebel TOMs
		any_opinion_modifier_target = {
			limit = { reverse_has_opinion_modifier = { who = PREV modifier = opinion_my_rebel } }
			reverse_remove_opinion = { who = PREV modifier = opinion_my_rebel }
		}
	}
}